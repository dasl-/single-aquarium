<div id="pond-container">
    <div id="instructions">
      <div id="instructions1" class="instructions">
        Welcome to the Aquarium. Eat the fish food so you don't get too skinny!
      </div>
      <div id="instructions2" class="instructions">
        Invite your friends to swim together :)
      </div>
    </div>

    <div id="credits">
      <div>
        koi designed by 
        <a href="http://nardove.com/" target="_blank">nardove</a>
        <br>
        interactive aquarium by 
        <a href="http://twitter.com/sunahsuh" target="_blank">sunah suh</a> 
        and 
        <a href="http://twitter.com/davidleibovic" target="_blank">david leibovic</a>
      </div>
    </div>


  <canvas id="mycanvas" data-processing-sources="processing/pond.pjs processing/Fish.pjs processing/Boid.pjs processing/Flagellum.pjs processing/Bubble.pjs processing/Food.pjs"></canvas>

</div>

<div id="gameOverDialog" title="You didn't feed your fish!">
    <p>Your fish has been neglected. It faded away due to starvation! Poor fishy.</p>
    <p>Eat the fish food to avoid getting too skinny!</p>
</div>

<!-- <div id="debugger" style="border: 1px solid black; height: 30px; width: 100%"></div> -->

<script type="text/javascript">
  // the reference to the processing sketch
  var pjs;
  // the id of the repeated update events that each local fish makes
  var intervalId;
  var gulp = new buzz.sound("audio/gulp", {
    formats: [ "ogg", "mp3"]
  });
  gulp.setVolume(100);


  channel.bind('pusher:subscription_error', function(status) {
    alert("pusher subscription failed: " + status);
  });

  // bind to the repeated updates that each local fish makes about itself.
  channel.bind('client-update', function(data) {
    pjs.updateRemoteFish(data.myLocation, data.mousePosition, data.stripeColor, data.id, data.maxSpeed, data.maxForce, data.bodySizeW, data.bodySizeH, data.velocity, data.canonicalUnModdedLocation, data.originalBodySizeW,
      data.originalBodySizeH, data.startFade);
    
    pjs.updateRemoteFood(data.foodLocation, data.foodVelocity, data.foodIsDead, data.foodId, 
      data.foodColor, data.foodAge, data.foodIsDummy);
  });

  // bind to the event that a remote fish ate a food
  channel.bind('client-my-fish-ate', function(data) {
    gulp.play();
    pjs.foodEatenByRemoteFish(data.foodEatenId, data.myFishId);
  });

  // create the repeated pusher updates
  function createRepeatedUpdateEvents() {
    if(pjs != null) {
      intervalId = setInterval(function(){
        sendUpdate();
        //printDebugInfo();
      }, 100); // send every 100 milliseconds if position has changed
      pjs.setPusherUpdateIntervalId(intervalId);
    }
    else
      setTimeout(createRepeatedUpdateEvents,250);
  }

  // obtain a reference to the processing sketch
  function getPjsInstance() {
    var bound = false;
    pjs = Processing.getInstanceById('mycanvas');
    if(pjs != null)
      bound = true;
    if(!bound)
      setTimeout(getPjsInstance, 250);
  } 

  // the repeated update where each local fish tells others about itself
  function sendUpdate(){
    var myFish = pjs.getMyFish();
    var myFood = pjs.getMyFood();
    channel.trigger("client-update",
      {
        myLocation: myFish.getLocation(),
        mousePosition: myFish.getMousePosition(),
        stripeColor: myFish.getStripeColor(),
        id: myFish.getId(),
        maxSpeed: myFish.getMaxSpeed(),
        maxForce: myFish.getMaxForce(),
        bodySizeW: myFish.getBodySizeW(),
        bodySizeH: myFish.getBodySizeH(),
        velocity: myFish.getVelocity(),
        canonicalUnModdedLocation: myFish.getCanonicalUnModdedLocation(),
        originalBodySizeW: myFish.getOriginalBodySizeW(),
        originalBodySizeH: myFish.getOriginalBodySizeH(),
        startFade: myFish.getStartFade(),

        foodLocation: myFood.getLocation(),
        foodVelocity: myFood.getVelocity(),
        foodIsDead: myFood.getIsDead(),
        foodId: myFood.getId(),
        foodColor: myFood.getColor(),
        foodAge: myFood.getAge(),
        foodIsDummy: myFood.getIsDummy(),
      });
  }

  function printDebugInfo() {
    myFish = pjs.getMyFish();
    document.getElementById('debugger').innerHTML = myFish.getId();
  } 
</script>

<script>
  $(document).ready(function() {
    $('#instructions1').delay(3000).fadeIn(3500)
      .fadeOut(3500, function() {
        $('#instructions1').text("It gets lonely swimming alone...").
          fadeIn(3500, function() {
            $('#instructions2').fadeIn(3500);
          });
      });
    setTimeout(function(){$(".instructions").fadeOut(3500);},28000);

   getPjsInstance();
   createRepeatedUpdateEvents();
  });
</script>

<audio autoplay loop>
  <source src="audio/swimming-music.ogg" type="audio/ogg" />   
  <source src="audio/swimming-music.mp3" type="audio/mpeg" />
</audio>